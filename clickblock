from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver import ActionChains
from selenium.webdriver.common.actions.wheel_input import ScrollOrigin
import time

# Test script for dynamic clicking and scrolling

def test_click_scroll():
    chromedriver_path = "C:/chromedriver_win32/chromedriver.exe"
    service = Service(chromedriver_path)
    browser = webdriver.Chrome(service=service)
    print("[+] Browser launched")

    try:
        browser.get("https://www.google.com/maps/search/car+rentals+in+dubai/@25.1622666,55.1781578,12z/data=!3m1!4b1?entry=ttu&g_ep=EgoyMDI1MDcwNy4wIKXMDSoASAFQAw%3D%3D")
        print("[+] Navigated to Google Maps")
        time.sleep(10)

        last_seen_jsactions = set()
        action = ActionChains(browser)
        le = 0

        while True:
            tiles = browser.find_elements(By.CLASS_NAME, "Nv2PK")
            print(f"[*] Found {len(tiles)} tiles")

            new_jsactions = set()
            for tile in tiles:
                jsaction = tile.get_attribute("jsaction")
                if jsaction not in last_seen_jsactions:
                    try:
                        print(f"[*] Clicking tile with jsaction: {jsaction}")
                        anchor = tile.find_element(By.CSS_SELECTOR, "a.hfpxzc")
                        browser.execute_script("arguments[0].scrollIntoView(true);", anchor)
                        time.sleep(1)
                        browser.execute_script("arguments[0].click();", anchor)
                        time.sleep(3)
                        new_jsactions.add(jsaction)
                    except Exception as e:
                        print(f"[!] Error clicking tile: {e}")

            if not new_jsactions:
                print("[~] No new jsactions found. Scrolling...")
                try:
                    last_tile = tiles[-1]
                    browser.execute_script("arguments[0].scrollIntoView(true);", last_tile)
                    time.sleep(2)
                except Exception as e:
                    print(f"[!] Error scrolling: {e}")

                le += 1
                if le > 20:
                    print("[!] Max scroll attempts reached. Ending.")
                    break
            else:
                last_seen_jsactions.update(new_jsactions)
                le = 0

    finally:
        print("[+] Test complete, closing browser")
        browser.quit()


if __name__ == "__main__":
    test_click_scroll()
